import requests
import pandas as pd

# Grafana API details
GRAFANA_URL = "https://us.aether.nss.vzwnet.com/gem/prometheus/api/v1"

# Load API keys from a text file
def load_api_keys(filename):
    api_keys = {}
    with open(filename, "r") as file:
        for line in file:
            function, key = line.strip().split(":")
            api_keys[function.strip()] = key.strip()
    print("Loaded API Keys:", api_keys)  # Debugging
    return api_keys

# Load metric names from a text file
def load_metric_names(filename):
    with open(filename, "r") as file:
        return [line.strip() for line in file if line.strip()]

# Fetch data for a metric
def fetch_metric_data(api_key, metric_name, function, query_type):
    headers = {"Authorization": f"Bearer {api_key}"}
    print(f"Using headers: {headers}")  # Debugging
    query = (
        f"sum by(kubernetes_namespace) ({query_type}({metric_name}[1h]))"
        if function in ["AMF", "SMF"]
        else f"sum by(local_dn) ({query_type}({metric_name}[1h]))"
    )
    params = {
        "query": query,
        "start": 1717632000,  # Replace with your start time (epoch)
        "end": 1733356800,    # Replace with your end time (epoch)
        "step": "60m",        # 1-hour interval
    }
    response = requests.get(f"{GRAFANA_URL}/query_range", headers=headers, params=params)
    if response.status_code == 200:
        return response.json().get("data", {}).get("result", [])
    else:
        print(f"Error querying {metric_name} ({query_type}): {response.status_code} - {response.text}")
        return []

# Main function
def main():
    # Load API keys
    api_keys = load_api_keys("api_keys.txt")

    # Define files for metrics
    metric_files = {
        "AMF": "amf_metrics.txt",
        "SMF": "smf_metrics.txt",
        "UPF": "upf_metrics.txt",
    }

    for function, filename in metric_files.items():
        print(f"Processing {function} metrics...")
        api_key = api_keys.get(function)
        if not api_key:
            print(f"No API key found for {function}. Skipping...")
            continue

        metric_names = load_metric_names(filename)
        for metric_name in metric_names:
            print(f"Fetching data for metric: {metric_name}...")
            sum_result = fetch_metric_data(api_key, metric_name, function, "sum_over_time")
            increase_result = fetch_metric_data(api_key, metric_name, function, "increase")

if __name__ == "__main__":
    main()
